// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int      @id @default(autoincrement())
  email                         String   @unique
  username                      String   @unique
  password_hash                 String
  role                          Role     @relation(fields: [roleId], references: [id])
  roleId                        Int
  profile_picture_url           String?  // Optional profile picture URL
  jobSeekerProfile              JobSeekerProfile[]
  jobProviderProfile            JobProviderProfile[]
  notifications                 Notification[]
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
}

model Role {
  id                             Int      @id @default(autoincrement())
  name                           String   @unique
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  users                          User[]
}

model JobSeekerProfile {
  id                            Int       @id @default(autoincrement())
  userId                        Int       @unique
  user                          User      @relation(fields: [userId], references: [id])
  first_name                    String
  last_name                     String
  phone_number                  String
  resume_url                    String
  skills                        Json      // Array or JSON
  experience                    Json      // Array of job experiences with start/end dates
  education                     Json      // Array of educational qualifications
  location                      String
  preferred_job_types           Json      // Array of preferred job types
  notifications_enabled         Boolean   @default(true)
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @updatedAt
  jobApplications               JobApplication[] // Add this relation
}

model JobProviderProfile {
  id                            Int      @id @default(autoincrement())
  userId                        Int      @unique  
  user                          User @relation(fields: [userId], references: [id])
  company_name                  String
  company_description           String
  website                       String
  email                         String
  phone                         String
  location                      String
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
  jobListings                   JobListing[]
}

model JobListing {
  id                        Int      @id @default(autoincrement())
  provider_id               Int
  provider                  JobProviderProfile @relation(fields: [provider_id], references: [id])
  title                     String
  description               String
  requirements              Json     // Array or JSON of job requirements
  preferred_skills          Json     // Array of preferred skills
  location                  String
  salary_range              String
  posted_at                 DateTime @default(now())
  expires_at                DateTime
  applications_count        Int      @default(0)
  created_at                DateTime  @default(now())
  updated_at                DateTime  @updatedAt
  jobApplications           JobApplication[]
  categories                JobCategory[]  // Add this opposite relation
}

model JobApplication {
  id                Int      @id @default(autoincrement())
  job_id            Int
  job               JobListing @relation(fields: [job_id], references: [id]) // Correct reference to id
  seeker_id         Int
  seeker            JobSeekerProfile @relation(fields: [seeker_id], references: [id]) // Correct reference to id
  applied_at        DateTime @default(now())
  cover_letter_url  String?
  portfolio_url     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model JobCategory {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  description   String?
  listings      JobListing[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  joblisting    JobListing[]
}

model Notification {
  id                 Int         @id @default(autoincrement())
  user_id            Int      // Foreign key to reference User's id
  user               User     @relation(fields: [user_id], references: [id]) // Correct field reference
  message            String
  read            Boolean  @default(false)
  created_at         DateTime @default(now())
 
}




