// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            Int      @id @default(autoincrement())
  email                         String   @unique
  username                      String   @unique
  password_hash                 String
  role                          Role     @relation(fields: [roleId], references: [id])
  roleId                        Int
  profile_picture_url           String?  // Optional profile picture URL
  profile                       Profile? 
  jobListing                  JobListing[] // Added field for job listings created by the user
  
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt
}

model Role {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  users                         User[]
}

model Profile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  description     String?
  location        String?
  skills          Json?
  education       String?
  phone_number    String?
  jobtitle        String?
  experience      String?
  jobtype         String?
  resume          String? // You might want to change the type to store file paths or another format
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  jobListing    JobListing[] // Holds job listings associated with the profile
}

model JobListing {
  id                            Int @id @default(autoincrement())
  providerId                    Int
  provider                      User   @relation(fields: [providerId], references: [id]) 
  title                         String
  description                   String
  requirements                  Json     
  preferredSkills               Json     
  location                      String
  salary_range                  String
  posted_at                     DateTime @default(now())
  expires_at                    DateTime
  created_at                    DateTime  @default(now())
  updated_at                    DateTime  @updatedAt
  jobApplications               JobApplication[]
  profile                       Profile? @relation(fields: [profileId], references: [id]) // Added the relation for profile
  profileId                     Int?    // Add a foreign key field for the relation
}

model JobApplication {
  id                            Int @id @default(autoincrement())
  jobId                         Int 
  seekerId                      Int 
  applied_at                    DateTime @default(now())
  cover_letter_url              String?
  portfolio_url                 String?
  created_at                    DateTime @default(now())
  updated_at                    DateTime @updatedAt

  jobListing                    JobListing @relation(fields: [jobId], references: [id]) 
}